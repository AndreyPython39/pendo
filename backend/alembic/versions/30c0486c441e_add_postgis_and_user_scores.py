"""add postgis and user scores

Revision ID: 30c0486c441e
Revises: 002
Create Date: 2025-03-30 00:12:45.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '30c0486c441e'
down_revision: Union[str, None] = '002'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create TribeStatus enum type
    op.execute("CREATE TYPE tribestatus AS ENUM ('pending', 'active', 'archived')")

    op.create_table('user_scores',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('level', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('tribe_votes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tribe_id', sa.Integer(), nullable=True),
    sa.Column('voter_id', sa.Integer(), nullable=True),
    sa.Column('candidate_id', sa.Integer(), nullable=True),
    sa.Column('voted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['candidate_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['tribe_id'], ['tribes.id'], ),
    sa.ForeignKeyConstraint(['voter_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('likes', 'from_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('likes', 'to_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('likes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('likes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_likes_id'), 'likes', ['id'], unique=False)
    op.alter_column('matches', 'user1_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('matches', 'user2_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('matches', 'matched_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('matches', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('matches', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_matches_id'), 'matches', ['id'], unique=False)
    op.alter_column('messages', 'match_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('messages', 'sender_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('messages', 'sent_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('messages', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.alter_column('tribe_members', 'tribe_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tribe_members', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tribe_members', 'joined_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_column('tribe_members', 'updated_at')
    op.drop_column('tribe_members', 'role')
    op.drop_column('tribe_members', 'created_at')
    op.add_column('tribes', sa.Column('image_url', sa.String(), nullable=True))
    op.add_column('tribes', sa.Column('status', postgresql.ENUM('pending', 'active', 'archived', name='tribestatus', create_type=False), nullable=True))
    op.add_column('tribes', sa.Column('moderation_status', sa.String(), nullable=True))
    op.add_column('tribes', sa.Column('moderated_by', sa.Integer(), nullable=True))
    op.alter_column('tribes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('tribes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_index(op.f('ix_tribes_id'), 'tribes', ['id'], unique=False)
    op.create_foreign_key(None, 'tribes', 'users', ['moderated_by'], ['id'])
    op.add_column('user_profiles', sa.Column('birthdate', sa.Date(), nullable=False))
    op.add_column('user_profiles', sa.Column('gender', sa.String(), nullable=False))
    op.add_column('user_profiles', sa.Column('looking_for', sa.String(), nullable=False))
    op.add_column('user_profiles', sa.Column('interests', sa.JSON(), nullable=True))
    op.add_column('user_profiles', sa.Column('temperament', sa.String(), nullable=True))
    op.add_column('user_profiles', sa.Column('moderation_status', sa.String(), nullable=True))
    op.add_column('user_profiles', sa.Column('moderated_by', sa.Integer(), nullable=True))
    op.alter_column('user_profiles', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('user_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_unique_constraint(None, 'user_profiles', ['user_id'])
    op.create_foreign_key(None, 'user_profiles', 'users', ['moderated_by'], ['id'])
    op.drop_column('user_profiles', 'latitude')
    op.drop_column('user_profiles', 'age')
    op.drop_column('user_profiles', 'longitude')
    op.drop_column('user_profiles', 'pendo_score')
    op.drop_column('user_profiles', 'name')
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('role', sa.String(), nullable=True))
    op.add_column('users', sa.Column('location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.execute("DROP INDEX IF EXISTS idx_users_location")
    op.create_index('idx_users_location', 'users', ['location'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index('idx_users_location', table_name='users', postgresql_using='gist')
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('users', 'location')
    op.drop_column('users', 'role')
    op.drop_column('users', 'is_verified')
    op.add_column('user_profiles', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('pendo_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_profiles', sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_profiles', type_='foreignkey')
    op.drop_constraint(None, 'user_profiles', type_='unique')
    op.alter_column('user_profiles', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('user_profiles', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('user_profiles', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('user_profiles', 'moderated_by')
    op.drop_column('user_profiles', 'moderation_status')
    op.drop_column('user_profiles', 'temperament')
    op.drop_column('user_profiles', 'interests')
    op.drop_column('user_profiles', 'looking_for')
    op.drop_column('user_profiles', 'gender')
    op.drop_column('user_profiles', 'birthdate')
    op.drop_constraint(None, 'tribes', type_='foreignkey')
    op.drop_index(op.f('ix_tribes_id'), table_name='tribes')
    op.alter_column('tribes', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('tribes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('tribes', 'moderated_by')
    op.drop_column('tribes', 'moderation_status')
    op.drop_column('tribes', 'status')
    op.drop_column('tribes', 'image_url')
    op.add_column('tribe_members', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('tribe_members', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('tribe_members', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.alter_column('tribe_members', 'joined_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('tribe_members', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tribe_members', 'tribe_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.alter_column('messages', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('messages', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('messages', 'sent_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('messages', 'sender_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('messages', 'match_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('ix_matches_id'), table_name='matches')
    op.alter_column('matches', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('matches', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('matches', 'matched_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('matches', 'user2_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('matches', 'user1_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index(op.f('ix_likes_id'), table_name='likes')
    op.alter_column('likes', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('likes', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('likes', 'to_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('likes', 'from_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_table('tribe_votes')
    op.drop_table('user_scores')
    op.execute("DROP TYPE tribestatus")
    # ### end Alembic commands ###
